name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/esc

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: 
      name: production
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,format=short
          type=ref,event=branch
          latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        server: [server1, server2]
      fail-fast: false

    steps:

    - name: Deploy to ${{ matrix.server }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets[format('SERVER_{0}_HOST', matrix.server)] }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          # Login to Docker Hub
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # Create .env file
          touch /home/esc/.env
          cat > /home/esc/.env << EOL
          PUBLIC_APP_URL=${{ secrets.PUBLIC_APP_URL }}
          PORT=5173
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          DISCORD_ID=${{ secrets.DISCORD_ID }}
          DISCORD_SECRET=${{ secrets.DISCORD_SECRET }}
          GOOGLE_ID=${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}
          DB_HOST=esc_db
          DB_PORT=5432
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_DB=${{ secrets.DB_DB }}
          DB_SSL=${{ secrets.DB_SSL }}
          OTEL_EXPORTER_OTLP_ENDPOINT=${{ secrets.OTEL_ENDPOINT }}
          EOL
          
          chmod 600 /home/esc/.env
          
          cd /home/esc
          docker compose pull esc_app
          docker compose up -d
